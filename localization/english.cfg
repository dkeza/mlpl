{
	"reservedArray": ["if", "then", "else", "end", "repeat", "until", "read", "write"],
	
	"parseError": "Scanner bug: state= %d\n",
	
	"lexerSyntaxError": "Syntax error at line %d, unexpected token -> ",
	"lexerReservedWordError": "reserved word: %s\n",
	"lexerAssignError": ":=\n",
	"lexerLTError": "<\n",
	"lexerEQError": "=\n",
	"lexerLPARENError": "(\n",
	"lexerRPARENError": ")\n",
	"lexerSEMIError": ";\n",
	"lexerPLUSError": "+\n",
	"lexerMINUSError": "-\n",
	"lexerTIMESError": "*\n",
	"lexerOVERError": "/\n",
	"lexerENDFILEError": "EOF\n",
	"lexerNUMError": "NUM, name= %s\n",
	"lexerIDError": "ID, name= %s\n",
	"lexerERRORError": "ERROR: %s\n",
	"lexerDEFAULTError": "Unknown token: %d\n",
	"lexerABORTINGError": "Aborting",
	
	"analyzeTypePrefixError": "Type error at line %d: %s\n",
	"analyzeTypeOpError": "Op applied to non-integer",
	"analyzeTypeIfError": "if test is not Boolean",
	"analyzeTypeAssignError": "assignment of non-integer value",
	"analyzeTypeWriteError": "write of non-integer or non-string value",
	"analyzeTypeRepeatError": "repeat test is not Boolean",
	
	"codegenUnknownOperatorError": "Unknown operator for code generation",
	"codegenUnknownTypeError": "Unknown type for code generation",
	
	"vmMissingColonError": "Missing colon on line: %d\n",
	"vmMemoryLocationError": "Invalid memory location %s on line: %d\n",
	"vmMemoryToLargeError": "To large memory location %d on line: %d\n",
	"vmMissingOpcodeError": "Missing opcode on location %d and line: %d\n",
	"vmInvalidOpcodeError": "Invalid opcode on location %d and line: %d\n",
	"vmInvalidNumberOfArgumentsError": "Invalid number of arguments on location %d and line: %d\n",
	"vmInvalidFirstArgumentError": "Invalid first argument on location %d and line: %d\n",
	"vmInvalidSecondArgumentError": "Invalid second argument on location %d and line: %d\n",
	"vmInvalidThirdArgumentError": "Invalid third argument on location %d and line: %d\n",
	"vmInvalidProgramCounterError": "Invalid program counter value: %d\n",
	"vmInvalidMemoryAddressError": "Invalid memory address value: %d\n",
	"vmNonIntegerEnteredError": "Non integer entered.",
	"vmDivisionWIthZeroError": "Division with zero."
}
